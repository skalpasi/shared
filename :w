#include <stdio.h>
#include <stdlib.h>

struct Node {
  int data;
  struct Node *left, *right;
};

struct Stack {
  struct Node *data;
  struct Stack *next;
};

void push(struct Stack *st, struct Node *addr) {
  struct Stack *node = malloc(sizeof(struct Node));
  node->data = addr;
  node->next = NULL;
  st->next = node;
  st = node;
}

int first = 1;
struct Node *init() {
  struct Node *node = (struct Node *)malloc(sizeof(struct Node));
  int data;
  if (first)
    printf("Enter root data: ");
  first = 0;
  scanf("%d", &data);
  if (data == -1)
    return NULL;
  node->data = data;
  printf("Enter left data of %d: ", node->data);
  node->left = init();
  printf("Enter right data of %d: ", node->data);
  node->right = init();
  return node;
}

void preorder(struct Node *root) {
  if (root == NULL)
    return;
  printf("%d ", root->data);
  preorder(root->left);
  preorder(root->right);
}

void inorder(struct Node *root) {
  if (root == NULL)
    return;
  inorder(root->left);
  printf("%d ", root->data);
  inorder(root->left);
}

void postorder(struct Node *root) {
  if (root == NULL)
    return;
  postorder(root->left);
  postorder(root->right);
  printf("%d ", root->data);
}

void it_preorder(struct Node *root) {
  struct Stack *st;
  while (root != NULL || !isEmpty(st)) {
    if (root != NULL) {
      printf("%d", root->data);
      push(st, root);
      root = root->left;
    } else {
      root = pop(st);
      root = root->right;
    }
  }
}

int main() {
  struct Node *root = init();
  struct Node *tree = root;
  preorder(tree);
  printf("\n");
  inorder(tree);
  printf("\n");
  postorder(tree);
  printf("\n");
  it_preorder(tree);
  return 0;
}
